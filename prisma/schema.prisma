generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  address        String?
  billingAddress String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
  favoriteIds    String[]  @db.ObjectId
  cartIds        String[]  @db.ObjectId
  isAdmin        Boolean
  comments       Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[]
}

model Category {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  products      Product[] // This field is used to create the reverse relation
  productToCats ProductToCategory[]
}

model Product {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  features      String[]
  price         String
  discount      Float?
  thumbnail     String
  img1          String
  img2          String
  img3          String
  rating        Int?
  stock         Int
  total         Float
  availability  Boolean
  brand         Brand?              @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId       String?             @map("_brandId") @db.ObjectId
  productToCats ProductToCategory[]
  Category      Category?           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String?             @db.ObjectId
  comments      Comment[]
  images        Image[] // Add this field for the image relationship
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  imageName String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model ProductToCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([productId])
  @@index([categoryId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}
